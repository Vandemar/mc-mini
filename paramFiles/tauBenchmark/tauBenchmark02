# Geometry paramter section. Includes parameters describing
# the geometry of the problem (size of the domain, dimensions, etc...)
enter geometryParams
  # Rows in the problem domain
  set M=8
  # Columns in the problem domain
  set N=16
leave

# Problem parameter section. Includes parameters describing the specifics of the
# current problem, including the physical models used and the time/space scale.
enter problemParams
  # CFL condition of the current problem.
  set cfl=0.5

  # Starting time of the current problem. Used strictly for timekeeping.
  set startTime=0.0
  # Ending time of the current problem.
  set endTime=1.0
  # Ending step of the current problem.
  set endStep=1

  # y-extent of the problem domain. Used for scaling the domain in space.
  set yExtent=3.1415926
  # x-extent of the problem domain. Used for scaling the domain in space if the y-extent is not
  # previously specified.
  # set xExtent=1.0

  # Temperature diffusivity constant of the material model
  set diffusivity=1.0
  set buoyancy=1.0
  # Forcing model for the given problem. Options include:
  # tauBenchmark : 
  #     Forcing model taken from Tau (1991; JCP Vol. 99). No additional
  #     parameters required
  #

  # solCXBenchmark/solKZBenchmark :
  #     Forcing model taken from Kronbichler et al. (2011). No additional
  #     parameters required
  #
  # buoyancy:
  #     Physically-accurate buoyancy forcing model. Additional paramters for
  #     reference temperature, density constant, and thermal expansion constant are
  #     required in the "buoyancyModel" subsection.
  #
  # vorticalFlow:
  #     Forcing model designed to induce a circular vortical flow around the center
  #     of the domain. No additional parameters required.
  set forcingModel=tauBenchmark
  # Parameter subsection for the buoyancy model.
  enter buoyancyModelParams
    # Reference temperature for the buoyancy calculation.
    set referenceTemperature=0
    # Material density constant for the buoyancy calculation.
    set densityConstant=100.0
    # Thermal expansion constant for the buoyancy calculation.
    set thermalExpansion=10.0
  leave

  # Temperature model for the given problem. Options include:B
  # constant :
  #     Constant temperature initial conditions. Extremely uninteresting.
  #
  # sineWave :
  #     Sine wave temperature initial conditions. a wave of amplitude given by 
  #     temperatureScale with xModes and yModes modes in the x and y-direction,
  #     respectively. Additional parameters for xModes and yModes are required.
  #
  # squareWave :
  #     Square wave temperature initial conditions. Creates a 2D square wave 
  #     perturbation in a background of temperature referenceTempreature with 
  #     amplitude given by referenceTempreature.
  # 
  # circle:
  # 	Creates a circular temperature initial condition around the user defined center.
  #	Moreover, the center can be moved within the domain --> (xCenter, yCenter)
  set temperatureModel=constant
  # Parameter subsection for the initial temperature model.
  enter initialTemperatureParams
    # Reference or "background" temperature
    set referenceTemperature=0.0
    # Amplitude of the perturbation from reference temperature.
    set temperatureScale=1.0
    # Number of modes in the x-direction (for use with sineWave initial conditions.)
    #set xModes=2
    # Number of modes in the y-direction (for use with sineWave initial conditions.)
    # set yModes=2
    # Radius (for circle initial conditions.)
    set radius=0.25
    # X-Position of the center of the circular inclusion (for circle initial conditions.)
    set xCenter=0.5
    # Y-position of the center of the circular inclusion (for circle initial conditions.)
    set yCenter=0.5
  leave

  # Temperature boundary parameters for the given problem
  enter temperatureBoundaryParams
    # Prescribed temperature along the upper boundary
    set upperBoundaryTemperature=0.0
    # Prescribed temperature along the lower boundary
    set lowerBoundaryTemperature=0.0
  leave

  # Viscosity model for the given problem. Options include:
  # 
  # constant :
  #     Constant viscosity conditions throughout the domain. Additional
  #     viscosityScale parameter is required.
  #
  # tauBenchmark :
  #     Viscosity conditions from the benchmark given by Tau (1991). No
  #     additional parameters are required. Constant viscosity of 1.0 imposed
  #     throughout the domain.
  #
  # solCXBenchmark :
  #     Viscosity conditions from the benchmark given by Kronbichler et al.,
  #     (2011). No additional parameters are required. Stepped viscosity with a
  #     difference of order 1E06 from the left to right sides of the domain.
  set viscosityModel=constant
  # Parameter subsection for the viscosity model.
  enter initialViscosity
    # Viscosity scale for use with the constant viscosity model. Specifies the
    # value of the viscosity across the domain.
    set viscosityScale=1.0
  leave

  # Boundary model for the given problem. Options include:
  #
  # tauBenchmark :
  #     Velocity boundary conditions from the benchmark given by Tau (1991). No
  #     additional parameters are required.
  #
  # solCXBenchmark :
  #     Velocity boundary conditions from the benchmark given by Kronbichler et
  #     al., (2011). No additional parameters are required.
  set boundaryModel=tauBenchmark

  # Method for calculating temperature advection. Options include:
  #
  # upwindMethod :
  #     Simple first-order advection method. Fast and stable, but inaccurate.
  #
  # frommMethod :
  #     Second-order accurate advection method. Slower and unstable on
  #     discontinuous input, but more accurate.
  #
  # none :
  #     No advection.
  set advectionMethod=none
  enter advectionParams
    # Flux limiter for use with second-order methods. Options include:
    #
    # minmod :
    #    Symmetric (Roe, 1986)
    #
    # superbee :
    #    Symmetric (Roe, 1986)
    #
    # vanLeer :
    #    Symmetric (van Leer, 1974)
    #
    # none :
    #    No flux limiter.
    set fluxLimiter=none
  leave

  # Method for calculating temperature diffusion. Options include:
  # 
  # forwardEuler :
  #      Simple but unstable first-order diffusion method.
  #
  # backwardEuler :
  #      Simple and stable first-order diffusion method.
  #
  # crankNicolson :
  #      Stable but oscillatory second-order diffusion method.
  #
  # none :
  #      No diffusion.
  set diffusionMethod=none
leave

# Output parameter section. Used to specify output format and filename.
enter outputParams
  # Output format. Current output method only supports hdf5 output.
  set outputFormat=hdf5
  # Output path. Specifies the path for the output file.
  set outputPath=output/tauBenchmark
  # Output filename. Specifies the filename for the output file.
  set outputFilename=tauBenchmark02
leave
